{"version":3,"sources":["Root.tsx"],"names":["React","useContext","useColorScheme","View","SafeAreaInsetsContext","SafeAreaProvider","Dialog","Toast","Color","Root","theme","colors","children","dialogConfig","toastConfig","colorScheme","safeAreaInsetsContext","colorsCustom","isDark","flex","instance"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,cAAT,EAAyBC,IAAzB,QAAqC,cAArC;AACA,SAASC,qBAAT,EAAgCC,gBAAhC,QAAwD,gCAAxD;AACA,SAASC,MAAT,EAA8CC,KAA9C,QAA2D,UAA3D;AACA,SAASC,KAAT,QAA+B,YAA/B;;AASA,MAAMC,IAAqC,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,MAAT;AAAiBC,EAAAA,QAAjB;AAA2BC,EAAAA,YAA3B;AAAyCC,EAAAA;AAAzC,CAAD,KAA4D;AACxG,QAAMC,WAAW,GAAGb,cAAc,EAAlC;AACA,QAAMc,qBAAqB,GAAGf,UAAU,CAACG,qBAAD,CAAxC;AACAI,EAAAA,KAAK,CAACS,YAAN,GAAqBN,MAArB;AAEA,QAAMO,MAAM,GAAG,CAACR,KAAD,aAACA,KAAD,cAACA,KAAD,GAAUK,WAAV,MAA2B,MAA1C;;AAEA,MAAIC,qBAAqB,KAAK,IAA9B,EAAoC;AAClC,wBACE,oBAAC,gBAAD,qBAEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEG,QAAAA,IAAI,EAAE;AAAR;AAAb,oBACE,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEb,MAAM,CAACc,QAApB;AAA8B,MAAA,MAAM,EAAEF,MAAtC;AAA8C,MAAA,MAAM,EAAEL;AAAtD,MADF,eAEE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEN,KAAK,CAACa,QAAlB;AAA4B,MAAA,MAAM,EAAEF,MAApC;AAA4C,MAAA,MAAM,EAAEJ;AAApD,MAFF,EAGGF,QAHH,CAFF,CADF;AAUD;;AAED;AAAA;AACE;AACA,wBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEO,QAAAA,IAAI,EAAE;AAAR;AAAb,oBACE,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEb,MAAM,CAACc,QAApB;AAA8B,MAAA,MAAM,EAAEF,MAAtC;AAA8C,MAAA,MAAM,EAAEL;AAAtD,MADF,eAEE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEN,KAAK,CAACa,QAAlB;AAA4B,MAAA,MAAM,EAAEF,MAApC;AAA4C,MAAA,MAAM,EAAEJ;AAApD,MAFF,EAGGF,QAHH;AAFF;AAQD,CA5BD;;AA8BA,eAAeH,IAAf","sourcesContent":["import * as React from 'react';\nimport { useContext } from 'react';\nimport { useColorScheme, View } from 'react-native';\nimport { SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Dialog, IConfigDialog, IConfigToast, Toast } from '../index';\nimport { Color, IColors } from '../service';\n\ntype IProps = {\n  dialogConfig?: Pick<IConfigDialog, 'closeOnOverlayTap' | 'autoClose'>;\n  toastConfig?: Pick<IConfigToast, 'autoClose'>;\n  theme?: 'light' | 'dark';\n  colors?: [IColors, IColors] /** ['light_colors' , 'dark_colors'] */;\n};\n\nconst Root: React.FunctionComponent<IProps> = ({ theme, colors, children, dialogConfig, toastConfig }) => {\n  const colorScheme = useColorScheme();\n  const safeAreaInsetsContext = useContext(SafeAreaInsetsContext);\n  Color.colorsCustom = colors;\n\n  const isDark = (theme ?? colorScheme) === 'dark';\n\n  if (safeAreaInsetsContext === null) {\n    return (\n      <SafeAreaProvider>\n        {/* eslint-disable-next-line react-native/no-inline-styles */}\n        <View style={{ flex: 1 }}>\n          <Dialog ref={Dialog.instance} isDark={isDark} config={dialogConfig} />\n          <Toast ref={Toast.instance} isDark={isDark} config={toastConfig} />\n          {children}\n        </View>\n      </SafeAreaProvider>\n    );\n  }\n\n  return (\n    // eslint-disable-next-line react-native/no-inline-styles\n    <View style={{ flex: 1 }}>\n      <Dialog ref={Dialog.instance} isDark={isDark} config={dialogConfig} />\n      <Toast ref={Toast.instance} isDark={isDark} config={toastConfig} />\n      {children}\n    </View>\n  );\n};\n\nexport default Root;\n"]}