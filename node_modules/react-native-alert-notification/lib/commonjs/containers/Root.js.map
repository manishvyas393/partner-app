{"version":3,"sources":["Root.tsx"],"names":["Root","theme","colors","children","dialogConfig","toastConfig","colorScheme","safeAreaInsetsContext","SafeAreaInsetsContext","Color","colorsCustom","isDark","flex","Dialog","instance","Toast"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;;;;;AASA,MAAMA,IAAqC,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,MAAT;AAAiBC,EAAAA,QAAjB;AAA2BC,EAAAA,YAA3B;AAAyCC,EAAAA;AAAzC,CAAD,KAA4D;AACxG,QAAMC,WAAW,GAAG,kCAApB;AACA,QAAMC,qBAAqB,GAAG,sBAAWC,iDAAX,CAA9B;AACAC,iBAAMC,YAAN,GAAqBR,MAArB;AAEA,QAAMS,MAAM,GAAG,CAACV,KAAD,aAACA,KAAD,cAACA,KAAD,GAAUK,WAAV,MAA2B,MAA1C;;AAEA,MAAIC,qBAAqB,KAAK,IAA9B,EAAoC;AAClC,wBACE,oBAAC,4CAAD,qBAEE,oBAAC,iBAAD;AAAM,MAAA,KAAK,EAAE;AAAEK,QAAAA,IAAI,EAAE;AAAR;AAAb,oBACE,oBAAC,aAAD;AAAQ,MAAA,GAAG,EAAEC,cAAOC,QAApB;AAA8B,MAAA,MAAM,EAAEH,MAAtC;AAA8C,MAAA,MAAM,EAAEP;AAAtD,MADF,eAEE,oBAAC,YAAD;AAAO,MAAA,GAAG,EAAEW,aAAMD,QAAlB;AAA4B,MAAA,MAAM,EAAEH,MAApC;AAA4C,MAAA,MAAM,EAAEN;AAApD,MAFF,EAGGF,QAHH,CAFF,CADF;AAUD;;AAED;AAAA;AACE;AACA,wBAAC,iBAAD;AAAM,MAAA,KAAK,EAAE;AAAES,QAAAA,IAAI,EAAE;AAAR;AAAb,oBACE,oBAAC,aAAD;AAAQ,MAAA,GAAG,EAAEC,cAAOC,QAApB;AAA8B,MAAA,MAAM,EAAEH,MAAtC;AAA8C,MAAA,MAAM,EAAEP;AAAtD,MADF,eAEE,oBAAC,YAAD;AAAO,MAAA,GAAG,EAAEW,aAAMD,QAAlB;AAA4B,MAAA,MAAM,EAAEH,MAApC;AAA4C,MAAA,MAAM,EAAEN;AAApD,MAFF,EAGGF,QAHH;AAFF;AAQD,CA5BD;;eA8BeH,I","sourcesContent":["import * as React from 'react';\nimport { useContext } from 'react';\nimport { useColorScheme, View } from 'react-native';\nimport { SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Dialog, IConfigDialog, IConfigToast, Toast } from '../index';\nimport { Color, IColors } from '../service';\n\ntype IProps = {\n  dialogConfig?: Pick<IConfigDialog, 'closeOnOverlayTap' | 'autoClose'>;\n  toastConfig?: Pick<IConfigToast, 'autoClose'>;\n  theme?: 'light' | 'dark';\n  colors?: [IColors, IColors] /** ['light_colors' , 'dark_colors'] */;\n};\n\nconst Root: React.FunctionComponent<IProps> = ({ theme, colors, children, dialogConfig, toastConfig }) => {\n  const colorScheme = useColorScheme();\n  const safeAreaInsetsContext = useContext(SafeAreaInsetsContext);\n  Color.colorsCustom = colors;\n\n  const isDark = (theme ?? colorScheme) === 'dark';\n\n  if (safeAreaInsetsContext === null) {\n    return (\n      <SafeAreaProvider>\n        {/* eslint-disable-next-line react-native/no-inline-styles */}\n        <View style={{ flex: 1 }}>\n          <Dialog ref={Dialog.instance} isDark={isDark} config={dialogConfig} />\n          <Toast ref={Toast.instance} isDark={isDark} config={toastConfig} />\n          {children}\n        </View>\n      </SafeAreaProvider>\n    );\n  }\n\n  return (\n    // eslint-disable-next-line react-native/no-inline-styles\n    <View style={{ flex: 1 }}>\n      <Dialog ref={Dialog.instance} isDark={isDark} config={dialogConfig} />\n      <Toast ref={Toast.instance} isDark={isDark} config={toastConfig} />\n      {children}\n    </View>\n  );\n};\n\nexport default Root;\n"]}